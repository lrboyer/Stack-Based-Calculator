#include <iostream>
#include <string>
#include <stack>

#pragma once
using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols

//this returns true if the char is a num and false otherwise
bool isNum(char c) {
    if ((c > 48) && (c < 58)) {
        return true;
    }
    else {
        return false;
    }
}

//this changes the string value into a char
//so a single letter string is not just a char
char convert(string s) {
    return s.c_str()[0];
}

//this gets the level of precedence for each case and returns it
//higher the precedence the higher the return
int precedence(char val) {
   if (val == '+' || val == '-') {
      return 1; //precedence of + or - is 1
   }
   else if (val == '*' || val == '/' || val == '%') {
      return 2; //precedence of * or / or % is 2
   }
   else {
      return 0;
   }
}

//this does the converting infix to postfix form and returns the length of the postfix string
//returns 0 if infix uses incorrect parenthesis usage
int infixToPostfix(string infix[], int length, string postfix[]) {
    int leftParen = 0;
    int rightParen = 0;

    //this adds up the total number of left and right paren to compare them later
    for (int i = 0; i < length; i++) {
        if (infix[i].compare("(") == 0) {
            leftParen++;
        }
        else if (infix[i].compare(")") == 0) {
            rightParen++;
        }
    }
    if (leftParen != rightParen) { //if the number of left and right parenthesis is even it should have correct parenthesis usage
        return 0;
    }
    else {
        stack< char > postfixStack; //makes stack of chars
        postfixStack.push('@'); //to prevent trying access top when stack is empty have dummy value
        int postfixPos = 0; //to keep track of where to put nums into the postfix
                            //the lengths of infix and postfix are diff so you need to keep track of postfix size to know
                            //where to put it and to not skip an array position

        for (int i = 0; i < length; i++) {
            if (isNum(convert(infix[i]))) { //for when infix is a num
                postfix[postfixPos++] = infix[i]; //after adding the val to postfix increment the counter so next time
                                                  //you add it puts it in the right spot
            }
            else if (infix[i].compare("(") == 0) { //when infix is ( it pushes ( onto the stack
                postfixStack.push('(');
            }
            else if (infix[i].compare(")") == 0) { //when infix is ) it adds everything on the stack to postfix until it hits (
                while (postfixStack.top() != '@' && (postfixStack.top() != '(')) {
                    postfix[postfixPos++] = postfixStack.top(); //add to postfix and pop until ( is found
                    postfixStack.pop();
                }
                postfixStack.pop(); //removes ( from stack
            }
            else {
                if (precedence(convert(infix[i])) > precedence(postfixStack.top())) { //for when infix is an operator it compares the stack precedence to infix
                    postfixStack.push(convert(infix[i])); //push onto stack if precedence is higher than top of stack
                }
                else { //if the stack precedence is higher it adds everything that is lower precedence to postfix
                    while ((postfixStack.top() != '@') && (precedence(convert(infix[i])) <= precedence(postfixStack.top()))) {
                        postfix[postfixPos++] = postfixStack.top(); //add to postfix and pop until higher precedence is found
                        postfixStack.pop();
                    }

                    postfixStack.push(convert(infix[i]));
                }
            }
        }
        
        while (postfixStack.top() != '@') { //adds the remainder of the stack into postfix
            postfix[postfixPos++] = postfixStack.top(); //add stack to string and pop until stack is not empty
            postfixStack.pop();
        }
            
        return postfixPos; //returns the size of postfix
    }  
}